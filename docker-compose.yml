version: '3'

services:

  # queue-listener-service - watches rabbitmq for messages
  queue-listener-service:
    build:
      context: .
      dockerfile: ./queue-listener-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  # authentication-service - handles user auth
  authentication-service:
    build:
      context: .
      dockerfile: ./authentication-service.dockerfile
    restart: always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1

  # mail-service - handles sending mail
  mail-service:
    build:
      context: .
      dockerfile: ./mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  # broker-service - main entry point; we call this from the front end
  broker-service:
    build:
      context: .
      dockerfile: ./broker-service.dockerfile
    ports:
      - "8080:80"

  # rabbitmq: the rabbitmq server
  rabbitmq:
    image: 'rabbitmq:3-management'
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  # a service to store logs
  logger-service:
    build:
      context: .
      dockerfile: ./logger-service.dockerfile
    restart: always
    volumes:
      - ./logs/:/app/logs

  # etcd: start etcd server
  etcd:
    image: docker.io/bitnami/etcd:3
    ports:
      - "2379:2379"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    volumes:
      - ./db-data/etcd/:/bitnami/etcd

  #  mailhog: a fake smtp server with a web interface
  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: always

  #  start mongo, and ensure that data is stored to a mounted volume
  mongo:
    image: 'mongo:4.2.17-bionic'
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  #  start Postgres, and ensure that data is stored to a mounted volume
  postgres:
    image: 'postgres:14.0'
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

